apiVersion: argoproj.io/v1alpha1                # Specifies the version of Argo used to process this file
kind: Workflow                                  # Specifies the type of resource this file defines
metadata:                                       # Specifies metadata for this resource
  generateName: terraform-                      # Specifies the prefix for the name of the workflow
spec:                                           # Specifies the specification for the workflow
  entrypoint: terraform                         # Specifies the entry point for the workflow
  templates:                                    # Specifies the templates for the workflow
    - name: terraform                           # Specifies the name of the first template
      container:                                # Specifies the container to run
        image: hashicorp/terraform:latest       # Specifies the Docker image for Terraform
        command: ["/bin/sh", "-c"]              # Specifies the command to run in the container
        args:                                   # Specifies the arguments for the command
          - |                                   # Specifies a multi-line argument
            apk update && apk add curl  # Installs curl
            curl -sLO https://github.com/gruntwork-io/terragrunt/releases/download/v0.29.1/terragrunt_linux_amd64  # Downloads and installs Terragrunt
            chmod +x terragrunt_linux_amd64  # Makes Terragrunt executable
            mv terragrunt_linux_amd64 /usr/local/bin/terragrunt  # Moves Terragrunt to /usr/local/bin
            cd /src  # Changes to the /src directory
            terraform init  # Initializes Terraform
            terraform validate  # Validates the Terraform code
            terraform plan -out=tfplan -input=false  # Generates a Terraform plan
            terraform apply -input=false -auto-approve tfplan  # Applies the Terraform plan
      volumeMounts:                             # Specifies the volume mounts for the container
        - name: terraform-tfstate               # Specifies the name of the first volume mount
          mountPath: /src/.terraform/           # Specifies the mount path for the first volume mount
        - name: terraform-tfstate               # Specifies the name of the second volume mount
          mountPath: /src/terraform.tfstate.d/  # Specifies the mount path for the second volume mount
    - name: verify-secrets                      # Specifies the name of the second template
      container:                                # Specifies the container to run
        image: alpine:latest                    # Specifies the Docker image for Alpine
        command: ["/bin/sh", "-c"]              # Specifies the command to run in the container
        args:                                   # Specifies the arguments for the command
          - |                                   # Specifies a multi-line argument
            set -e  # Exits immediately if any command exits with a non-zero status
            if [ -z "$ARM_CLIENT_ID" ]; then echo "ARM_CLIENT_ID is not set"; exit 1; fi  # Checks if ARM_CLIENT_ID is set
            if [ -z "$ARM_CLIENT_SECRET" ]; then echo "ARM_CLIENT_SECRET is not set"; exit 1; fi  # Checks if ARM_CLIENT_SECRET is set
            if [ -z "$ARM_SUBSCRIPTION_ID" ]; then echo "ARM_SUBSCRIPTION_ID is not set"; exit 1; fi  # Checks if ARM_SUBSCRIPTION_ID is set
            if [ -z "$ARM_TENANT_ID" ]; then echo "ARM_TENANT_ID is not set"; exit 1; fi  # Checks if ARM_TENANT_ID is set
            if [ -z "$ADMIN_SSH_KEY
